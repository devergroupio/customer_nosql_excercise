Consistency :
Consistent means that data moves from one correct state to another correct state, with no possibility that readers could view different values that don’t make sense together.
Consistency means that when two users access the system at the same time they should see the same data.
Typical relational databases are consistent: SQL Server, MySQL, and PostgreSQL.
That reads are always up to date, which means any client making a request to the database will get the same view of data.

Availability :
Availability means up 24/7 and responds in a reasonable time.
The system remains operational 100% of the time. Every client gets a response, regardless of the state of any individual node in the system. This metric is trivial to measure: either you can submit read/write commands, or you cannot.
Typical relational databases are also available: SQL Server, MySQL, and PostgreSQL. This means that relational databases exist in the CA space - consistency and availability.
Database requests always receive a response (when valid).

Prioritizing availability in a distributed database
Availability is essential when data accumulation is a priority. Think here of things like behavioral data or user preferences. In scenarios like these, you will want to capture as much information as possible about what a user or customer is doing, but it isn’t critical that the database is constantly up to date. It simply just needs to be accessible and available even when network connections aren’t working.
The growing demand for offline application use is also one reason why you might use a NoSQL database that prioritizes availability over consistency.
